import { useEffect, useState } from "react";

export function useAsyncInitialize<T>(func: ()=> Promise<T>, deps: any[] = []) {
    const [state, setState] = useState<T | undefined>();
    useEffect(()=>{
        (async ()=> {
            setState(await func())
        })()
    }, deps)

    return state
}
//на вход идет какая-то функция которая будет возвращать какой-то объект дженерик
//и если есть зависимости будет изменять его
//если изменяется сразу, возвращается - чтобы не обновлять лишний раз страницу

//Данный код представляет собой кастомный хук `useAsyncInitialize`, который используется для инициализации асинхронных данных в компонентах React.
//
// 1. Импортируются функции `useEffect` и `useState` из библиотеки React.
// 2. Функция `useAsyncInitialize` определена как обобщенная функция, принимающая два параметра:
// `func` (функция, возвращающая промис) и `deps` (массив зависимостей, по умолчанию пустой массив).
// 3. В компоненте, где будет использоваться хук `useAsyncInitialize`,
// вызывается функция `useState`, которая возвращает массив с двумя элементами: состояние `state`
// и функция обновления состояния `setState`. Значение по умолчанию для `state` устанавливается как `undefined`.
// 4. Затем используется хук `useEffect`, который выполняется после каждого рендера компонента
// (поскольку `deps` не указан), и содержит асинхронную функцию.
// Внутри этой функции вызывается функция `func` и результат ее выполнения передается в `setState`
// с использованием `await`. Таким образом, значение состояния `state` обновляется асинхронно.
// 5. Возвращается значение состояния `state`.